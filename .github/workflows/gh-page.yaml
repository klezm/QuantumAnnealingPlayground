# https://github.com/marketplace/actions/fastpages-an-easy-to-use-blogging-platform-with-support-for-jupyter-notebooks#using-the-github-action--your-own-custom-blog
# https://github.com/marketplace?type=actions&query=notebook+
# https://nbconvert.readthedocs.io/en/latest/usage.html
# jupyter nbconvert --to html --embed-images notebook.ipynb
# jupyter nbconvert --to markdown notebook.ipynb

# act -s GITHUB_TOKEN="$GITHUB_TOKEN"

name: GH Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4


      - name: ipynb => html
        run: |
          # apt update && apt install -y pandoc
          apt update && apt install -y rsync
          # pip install -U pip
          # pip install -U jupyterlab
          # pip install "nbconvert<6" jupyter_contrib_nbextensions
          # pip install -U "nbconvert<6" jupyter_contrib_nbextensions jinja2
          # pip install -U nbconvert jupyter_contrib_nbextensions notebook jupyter
          # pip install -U nbconvert jupyter_contrib_nbextensions jinja2
          # sudo -E pip install -U nbconvert jupyter_contrib_nbextensions
          # pip install -U nbconvert https://github.com/ipython-contrib/jupyter_contrib_nbextensions/tarball/master
          pip install -U nbconvert # jupyterlab
          # pip install jupyter_contrib_nbextensions "nbconvert==6.4.4" "jinja2==3.0.3"
          echo "+++----------------------------------+++"
          python -V
          pip -V
          # jupyter nbconvert --help
          # jupyter contrib nbextension install --user
          echo "----------------------------------"
          # jupyter nbextension install --user
          # jupyter contrib nbextension install --user
          # jupyter nbextension enable codefolding/main
          # # nbconvert templates: https://stackoverflow.com/a/24067557/9058671
          # jupyter nbconvert --to html --embed-images **/*.ipynb
          # jupyter nbconvert --to html **/*.ipynb
          # jupyter nbconvert --to html_ch --EmbedImagesPreprocessor.embed_remote_images=True **/*.ipynb # https://stackoverflow.com/a/69522338/9058671
          jupyter nbconvert --to html --EmbedImagesPreprocessor.embed_remote_images=True **/*.ipynb


      - name: Add links to all HTMLs and Markdowns to repo README.md
        shell: python
        run: |
          import itertools
          from pathlib import Path

          def get_markdown_files(root_dir):
              return sorted([p.relative_to(root_dir) for p in root_dir.glob("**/*.md")])

          def get_html_files_and_dirs(pages_root):
              html_files = list(pages_root.glob("**/*.html"))
              html_dirs = list(set([x.parent for x in html_files]))
              return sorted(html_files + html_dirs)

          def get_html_files_and_dirs_grouped(pages_root):
              html_files = sorted(pages_root.glob("**/*.html"))
              html_tree = sorted([g, sorted(fs)] for g, fs in itertools.groupby(html_files, key=lambda x: x.parent))
              return html_tree

          def make_md_link(url, text=None, list=False, indent=0):
              return ("\t" * indent) + ("- " if (list | indent) else "") + f"[{text or url}]({url})"

          def make_md_link_list(urls, level=0, root=Path("."), remove_suffix="", orig_suffix=False):
              links = []
              for url in urls:
                  text = None
                  if remove_suffix:
                      text = url.name.removesuffix(remove_suffix)
                  if orig_suffix:
                      for p in url.parent.glob(f'{url.stem}.*'):
                          if url.suffix != p.suffix:
                            text = p.name  # p.relative_to(base_dir).name
                  links.append(make_md_link(url.relative_to(root), text=text, list=True, indent=level))
              return "\n".join(links)
              return "\n".join(make_md_link(
                  url,
                  text=None if not remove_suffix else url.name.removesuffix(remove_suffix),
                  list=True,
                  indent=level) for url in urls)

          def _generate_md_file_tree(dirs, pages_root=Path("."), remove_suffix=".html"):
              links = []
              for item in sorted(dirs):
                  if item.is_dir():
                      links.append(f'- {item.relative_to(pages_root).as_posix()}')
                  else:
                      link_text = item.relative_to(item.parent).name.removesuffix(remove_suffix)
                      links.append(make_md_link(item.relative_to(pages_root), link_text, indent=1))
              return "\n".join(links)

          def generate_md_file_tree(dirs, pages_root=Path("."), remove_suffix=".html"):
              links = []
              for parent, files in dirs:
                  links.append(f'- {parent.relative_to(pages_root).as_posix()}')
                  links.append(make_md_link_list(files, level=1, root=pages_root, remove_suffix=remove_suffix, orig_suffix=True))
              return "\n".join(links)

          def update_readme_with_links(root_dir):
              md_files = get_markdown_files(root_dir)
              # html_items = get_html_files_and_dirs(root_dir)
              html_items = get_html_files_and_dirs_grouped(root_dir)
              with open(root_dir.joinpath("README.md"), "a+") as f:
                  f.write("\n## Sitemap Markdowns\n\n")
                  f.write(make_md_link_list(md_files))
                  f.write("\n\n## Sitemap HTMLs\n\n")
                  f.write(generate_md_file_tree(html_items, pages_root=root_dir))
              # md = "\n## Sitemap Markdowns\n\n"
              # md += make_md_link_list(md_files)
              # md += "\n\n## Sitemap HTMLs\n\n"
              # md += generate_md_file_tree(html_items, pages_root=root_dir)
              # return md

          def insert_toc_in_readmes(root_dir):
              for readme in root_dir.glob("**/README.md"):
                  update_readme_with_links(readme.parent)
                  # display(Markdown(update_readme_with_links(readme.parent)))

          pages_root = Path(".")
          # update_readme_with_links(pages_root)
          # from IPython.display import Markdown, HTML
          # display(Markdown(update_readme_with_links(pages_root)))
          insert_toc_in_readmes(pages_root)


      - name: Deploy to GitHub Pages
        # You may pin to the exact commit or the version.
        # uses: JamesIves/github-pages-deploy-action@6ce741f5d4e01e15f9ea5ec96df1a43f522c330f
        uses: JamesIves/github-pages-deploy-action@v4.6.1
        with:
          # This option allows you to define a private SSH key to be used in conjunction with a repository deployment key to deploy using SSH. The private key should be stored in the `secrets / with` menu **as a secret**. The public should be stored in the repositories deployment keys menu and be given write access.
          # Alternatively you can set this field to `true` to enable SSH endpoints for deployment without configuring the ssh client. This can be useful if you've already setup the SSH client using another package or action in a previous step.

#           ssh-key: # optional
          # This option defaults to the repository scoped GitHub Token.  However if you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.  This should be stored in the `secrets / with` menu **as a secret**.
          # We recommend using a service account with the least permissions neccersary and when generating a new PAT that you select the least permission scopes required.
          # [Learn more about creating and using encrypted secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

#           token: # optional, default is ${{ github.token }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: gh-pages
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: .
          # If you would like to push the contents of the deployment folder into a specific directory on the deployment branch you can specify it here.
#           target-folder: # optional
          # If you need to customize the commit message for an integration you can do so.
#           commit-message: # optional
          # If your project generates hashed files on build you can use this option to automatically delete them from the target folder on the deployment branch with each deploy. This option is on by default and can be toggled off by setting it to false.
#           clean: # optional, default is true
          # If you need to use clean but you would like to preserve certain files or folders you can use this option. This should contain each pattern as a single line in a multiline string.
#           clean-exclude: # optional
          # Do not actually push back, but use `--dry-run` on `git push` invocations insead.
#           dry-run: # optional
          # Allows you to customize the name that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the name in the GitHub context, followed by the name of the action.
#           git-config-name: # optional
          # Allows you to customize the email that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the email in the GitHub context, followed by a generic noreply GitHub email.
#           git-config-email: # optional
          # Allows you to specify a different repository path so long as you have permissions to push to it. This should be formatted like so: JamesIves/github-pages-deploy-action
#           repository-name: # optional
          # This should point to where your project lives on the virtual machine. The GitHub Actions environment will set this for you. It is only neccersary to set this variable if you're using the node module.
#           workspace: # optional
          # This option can be used if you'd prefer to have a single commit on the deployment branch instead of maintaining the full history.
#           single-commit: # optional
          # Silences the action output preventing it from displaying git messages.
#           silent: # optional
